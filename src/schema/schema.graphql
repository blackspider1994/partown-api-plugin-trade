enum tradeTypeEnum {
  offer
  bid
}

enum approvalStatusEnum {
  pending
  approved
  cancelled
}

enum completionStatusEnum {
  completed
  inProgress
  cancelled
}

type trade implements Node {
  _id: ID!
  buyerId: String
  sellerId: String
  productId: String!
  productDetails: CatalogItemProduct
  price: Float!
  area: Float!
  originalQuantity: Float
  expirationTime: String
  tradeType: tradeTypeEnum!
  decorum: String
  minQty: Float!
  currencyUnit: String
  cancellationReason: String
  endDate: Date
  createdBy: String
  createdByInfo: Account
  isDisabled: Boolean
  completionStatus: completionStatusEnum
  createdAt: DateTime
  updatedAt: DateTime
}

type TradeEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The Transaction"
  node: trade
}

type TradeConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [TradeEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [trade]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

input tradeInput {
  buyerId: String
  sellerId: String
  productId: String
  price: Float
  area: Float
  expirationTime: String
  tradeType: tradeTypeEnum
  approvalStatus: approvalStatusEnum
  decorum: String
  minQty: Float
  currencyUnit: String
  cancellationReason: String
  endDate: Date
  createdBy: String
}

input tradeFiltersInput {
  byUser: String
  byProperty: String
}

type tradeOutput {
  _id: String
}

type ownershipHistory {
  date: DateTime
  quantity: Float
  price: Float
  tradeType: String
}

type UnitOwnership implements Node {
  _id: ID!
  productId: String
  productDetails: CatalogItemProduct
  amount: Float!
  unitsEscrow: Float
  sellerId: String
  tradeId: String
  tradeInfo: trade
  tradeType: tradeTypeEnum
  ownerId: String
  ownerInfo: Account
  tradeHistory: [tradeTypeEnum]
  ownershipHistory: [ownershipHistory]
}

type UnitOwnershipEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The Transaction"
  node: UnitOwnership
}

type UnitOwnershipConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [UnitOwnershipEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [UnitOwnership]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

input UnitOwnershipInput {
  buyerId: String
  unitsOwned: Float!
  lockedUnits: Float
  sellerId: String
  tradeId: String
  tradeType: tradeTypeEnum
  productId: String
  purchaseHistory: [Float]
  unitsHistory: [Float]
  tradeHistory: [tradeTypeEnum]
}

input SubscribePropertyInput {
  productId: String!
  tradeId: String!
  units: Float!
  price: Float!
  serviceCharge: Float!
  ownerId: String!
  sellerId: String!
  minQty: Float!
}

input sellPropertyInput {
  productId: String!
  tradeId: String!
  units: Float!
  price: Float!
  serviceCharge: Float!
  ownerId: String
  buyerId: String!
  sellerId: String
  minQty: Float!
}

type OwnershipOutput {
  _id: ID
  ownerId: String
  sellerId: String
  unitsOwned: Float
  productId: String
  tradeType: String
  ownerInfo: Account
}

enum VoteTypeEnum {
  UPVOTE
  DOWNVOTE
}

type Vote {
  productId: String
  userId: String
  voteType: VoteTypeEnum
}

input voteInput {
  productId: String
  voteType: VoteTypeEnum
}

type voteOutput {
  upVotesCount: Int
  downVotesCount: Int
}

enum notificationTypes {
  banUser
  transaction
}

enum notificationStatus {
  unread
  read
}

# notifications
type Notification implements Node {
  _id: ID!
  title: String
  details: String
  hasDetails: Boolean
  message: String
  status: notificationStatus
  timeSent: DateTime
  # to: ID!
  from: ID
  sender: Account
  type: notificationTypes
  url: String
  isCleared: Boolean
  image: String
}
type NotificationEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The Transaction"
  node: Notification
}

type NotificationConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [NotificationEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [Notification]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

input createNotificationInput {
  title: String
  details: String
  hasDetails: Boolean!
  message: String!
  to: ID!
  type: notificationTypes!
  image: String
}

extend type Mutation {
  makePrimaryOwner(ownerId: String!, productId: String!): Boolean
  makeResaleOwner(ownerId: String!, productId: String!, units: Float!): Boolean
  createTradePrimary(input: tradeInput!): tradeOutput
  createTradeForProperty(input: tradeInput!): tradeOutput
  subscribeToPrimaryProperty(input: SubscribePropertyInput!): Boolean
  purchaseUnits(input: sellPropertyInput): Boolean
  sellUnits(input: sellPropertyInput): Boolean
  updateOwnerShip(ownerId: String!, productId: String!, units: Float!): Boolean
  voteProperty(input: voteInput!): Boolean
  disableTrade(tradeId: ID!): Boolean
  cancelTrade(tradeId: ID!): Boolean
  editTrade(input: tradeInput, tradeId: ID!): Boolean
  clearNotification(notificationId: ID): Boolean

  # notifications
  createNotification(input: createNotificationInput): Notification
  markAsRead(notificationId: ID): Notification
}

enum NotificationsSortByField {
  "Notification  ID"
  _id

  "Date and time at which this account was created"
  createdAt

  "Date and time at which this account was last updated"
  updatedAt

  "Date time when the notification was sent"
  timeSent
}

extend type Query {
  getTrades(input: tradeFiltersInput): [trade]
  getTradesForProperty(productId: String!, type: tradeTypeEnum): [trade]
  myTrades(
    filter: completionStatusEnum
    searchQuery: String
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = createdAt
  ): TradeConnection!
  getUnitOwnership(productId: String!): UnitOwnership
  getUserProperties(
    accountId: ID

    searchQuery: String

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = createdAt
  ): UnitOwnershipConnection!

  remainingQuantity(productId: String!): Float
  propertyVotes(productId: String!): voteOutput

  userNotifications(
    searchQuery: String
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: NotificationsSortByField = timeSent
  ): NotificationConnection!
}

extend type Subscription {
  notifications(accountId: ID!): Notification
}
